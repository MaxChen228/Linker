"""
Áµ±‰∏ÄÈÖçÁΩÆÁÆ°ÁêÜÊ®°ÁµÑ
ÈõÜ‰∏≠ÁÆ°ÁêÜÊâÄÊúâÈÖçÁΩÆÈ†ÖÔºåÊ∂àÈô§È≠îË°ìÊï∏Â≠ó
"""

import json
from dataclasses import dataclass
from pathlib import Path


@dataclass
class DisplaySettings:
    """È°ØÁ§∫Áõ∏ÈóúÈÖçÁΩÆ"""

    MAX_DISPLAY_ITEMS: int = 10
    MAX_EXAMPLES_PER_POINT: int = 5
    SEPARATOR_WIDTH: int = 50
    SEPARATOR_CHAR: str = "-"
    WIDE_SEPARATOR_CHAR: str = "="
    SEPARATOR_LINE: str = "-" * 50
    WIDE_SEPARATOR_LINE: str = "=" * 50


@dataclass
class LearningSettings:
    """Â≠∏ÁøíÁõ∏ÈóúÈÖçÁΩÆ"""

    # ÊéåÊè°Â∫¶ÊèêÂçáÂπÖÂ∫¶
    MASTERY_INCREMENTS: dict[str, float] = None

    # ÊéåÊè°Â∫¶‰∏ãÈôçÂπÖÂ∫¶
    MASTERY_DECREMENTS: dict[str, float] = None

    # Ë§áÁøíÈñìÈöîÔºàÂ§©Êï∏Ôºâ
    REVIEW_INTERVALS: dict[str, int] = None

    # ÊéåÊè°Â∫¶ÈñæÂÄº
    MASTERY_THRESHOLDS: dict[str, float] = None

    # Èõ£Â∫¶Á¥öÂà•ÊèèËø∞
    DIFFICULTY_LEVELS: dict[int, str] = None

    def __post_init__(self):
        if self.MASTERY_INCREMENTS is None:
            self.MASTERY_INCREMENTS = {
                "systematic": 0.25,
                "isolated": 0.20,
                "enhancement": 0.15,
                "other": 0.15,
            }

        if self.MASTERY_DECREMENTS is None:
            self.MASTERY_DECREMENTS = {"systematic": 0.15, "isolated": 0.10, "other": 0.10}

        if self.REVIEW_INTERVALS is None:
            self.REVIEW_INTERVALS = {
                "immediate": 1,  # Á´ãÂç≥Ë§áÁøí
                "short": 3,  # Áü≠ÊúüË®òÊÜ∂
                "medium": 7,  # ‰∏≠ÊúüË®òÊÜ∂
                "long": 14,  # Èï∑ÊúüË®òÊÜ∂
                "mastered": 30,  # Â∑≤ÊéåÊè°
            }

        if self.MASTERY_THRESHOLDS is None:
            self.MASTERY_THRESHOLDS = {
                "beginner": 0.3,
                "intermediate": 0.5,
                "advanced": 0.7,
                "expert": 0.9,
            }

        if self.DIFFICULTY_LEVELS is None:
            self.DIFFICULTY_LEVELS = {
                1: "ÂàùÁ¥ö (Âúã‰∏≠Âü∫Á§é)",
                2: "‰∏≠Á¥ö (È´ò‰∏≠Ê†∏ÂøÉ)",
                3: "È´òÁ¥ö (Â≠∏Ê∏¨ÊåëÊà∞)",
            }


@dataclass
class CacheSettings:
    """Á∑©Â≠òÈÖçÁΩÆ"""

    CACHE_TTL_SECONDS: int = 300  # 5ÂàÜÈêò
    MAX_CACHE_SIZE: int = 100
    CACHE_KEY_LENGTH: int = 50  # Á∑©Â≠òÈçµÁöÑÊà™ÂèñÈï∑Â∫¶


@dataclass
class APISettings:
    """APIÁõ∏ÈóúÈÖçÁΩÆ"""

    DEFAULT_MODEL: str = "gemini-2.0-flash-exp"
    REQUEST_TIMEOUT: int = 30
    MAX_RETRIES: int = 3
    RESPONSE_MIME_TYPE: str = "application/json"


@dataclass
class ErrorPrioritySettings:
    """ÈåØË™§ÂÑ™ÂÖàÁ¥öÈÖçÁΩÆ"""

    PRIORITIES: dict[str, int] = None

    def __post_init__(self):
        if self.PRIORITIES is None:
            self.PRIORITIES = {
                "systematic": 1,  # Á≥ªÁµ±ÊÄßÈåØË™§ - ÊúÄÈ´òÂÑ™ÂÖà
                "isolated": 2,  # ÂñÆ‰∏ÄÊÄßÈåØË™§
                "other": 3,  # ÂÖ∂‰ªñÈåØË™§
                "enhancement": 4,  # ÂèØ‰ª•Êõ¥Â•Ω - ÊúÄ‰ΩéÂÑ™ÂÖà
            }


@dataclass
class PracticeSettings:
    """Á∑¥ÁøíÁõ∏ÈóúÈÖçÁΩÆ"""

    MIN_SENTENCE_LENGTH: int = 10
    MAX_SENTENCE_LENGTH: int = 30
    RECENT_MISTAKES_COUNT: int = 10  # ÂàÜÊûêÊúÄËøëNÊ¨°ÈåØË™§
    MIN_PRACTICE_FOR_ANALYSIS: int = 5  # ÊúÄÂ∞ëÁ∑¥ÁøíÊ¨°Êï∏ÊâçÈÄ≤Ë°åAIÂàÜÊûê

    # Èõ£Â∫¶Êò†Â∞Ñ
    DIFFICULTY_DESCRIPTIONS: dict[int, str] = None

    def __post_init__(self):
        if self.DIFFICULTY_DESCRIPTIONS is None:
            self.DIFFICULTY_DESCRIPTIONS = {
                1: "Âúã‰∏≠Âü∫Á§éÁ®ãÂ∫¶ÔºåÁ∞°ÂñÆË©ûÂΩôÂíåÂü∫Êú¨Âè•Âûã",
                2: "È´ò‰∏≠Á®ãÂ∫¶ÔºåÂåÖÂê´Â∏∏Ë¶ãÁâáË™ûÂíåË§áÈõúÂè•Âûã",
                3: "Â≠∏Ê∏¨Á®ãÂ∫¶ÔºåÂåÖÂê´ÈÄ≤ÈöéË©ûÂΩôÂíåË§áÈõúË™ûÊ≥ï",
            }


@dataclass
class UISettings:
    """UIÁõ∏ÈóúÈÖçÁΩÆ"""

    # Ë°®ÊÉÖÁ¨¶ËôüÊò†Â∞Ñ
    CATEGORY_EMOJIS: dict[str, str] = None

    # ÂÑ™ÂÖàÁ¥öË°®ÊÉÖÁ¨¶Ëôü
    PRIORITY_EMOJIS: dict[int, str] = None

    # ÊéåÊè°Â∫¶È°ØÁ§∫
    MASTERY_BAR_LENGTH: int = 10
    MASTERY_BAR_FILLED: str = "‚ñà"
    MASTERY_BAR_EMPTY: str = "‚ñë"

    def __post_init__(self):
        if self.CATEGORY_EMOJIS is None:
            self.CATEGORY_EMOJIS = {
                "systematic": "‚öôÔ∏è",
                "isolated": "üìå",
                "enhancement": "‚ú®",
                "other": "‚ùì",
            }

        if self.PRIORITY_EMOJIS is None:
            self.PRIORITY_EMOJIS = {1: "üî•", 2: "‚≠ê", 3: "üí´", 4: "‚òÜ"}


class Settings:
    """Áµ±‰∏ÄÈÖçÁΩÆÈ°û"""

    def __init__(self):
        self.display = DisplaySettings()
        self.learning = LearningSettings()
        self.cache = CacheSettings()
        self.api = APISettings()
        self.error_priority = ErrorPrioritySettings()
        self.practice = PracticeSettings()
        self.ui = UISettings()

    @classmethod
    def load_from_file(cls, config_file: str = "config.json") -> "Settings":
        """ÂæûÊñá‰ª∂Âä†ËºâÈÖçÁΩÆ"""
        settings = cls()
        config_path = Path(config_file)

        if config_path.exists():
            try:
                with open(config_path, encoding="utf-8") as f:
                    data = json.load(f)

                # Êõ¥Êñ∞ÂêÑÂÄãÈÖçÁΩÆÈÉ®ÂàÜ
                if "display" in data:
                    for key, value in data["display"].items():
                        if hasattr(settings.display, key):
                            setattr(settings.display, key, value)

                if "learning" in data:
                    for key, value in data["learning"].items():
                        if hasattr(settings.learning, key):
                            setattr(settings.learning, key, value)

                if "cache" in data:
                    for key, value in data["cache"].items():
                        if hasattr(settings.cache, key):
                            setattr(settings.cache, key, value)

                if "api" in data:
                    for key, value in data["api"].items():
                        if hasattr(settings.api, key):
                            setattr(settings.api, key, value)

                print(f"‚úÖ Â∑≤Âæû {config_file} Âä†ËºâÈÖçÁΩÆ")
            except Exception as e:
                print(f"‚ö†Ô∏è Âä†ËºâÈÖçÁΩÆÊñá‰ª∂Â§±Êïó: {e}Ôºå‰ΩøÁî®ÈªòË™çÈÖçÁΩÆ")

        return settings

    def save_to_file(self, config_file: str = "config.json"):
        """‰øùÂ≠òÈÖçÁΩÆÂà∞Êñá‰ª∂"""
        data = {
            "display": {
                "MAX_DISPLAY_ITEMS": self.display.MAX_DISPLAY_ITEMS,
                "MAX_EXAMPLES_PER_POINT": self.display.MAX_EXAMPLES_PER_POINT,
                "SEPARATOR_WIDTH": self.display.SEPARATOR_WIDTH,
                "SEPARATOR_CHAR": self.display.SEPARATOR_CHAR,
                "WIDE_SEPARATOR_CHAR": self.display.WIDE_SEPARATOR_CHAR,
            },
            "learning": {
                "MASTERY_INCREMENTS": self.learning.MASTERY_INCREMENTS,
                "MASTERY_DECREMENTS": self.learning.MASTERY_DECREMENTS,
                "REVIEW_INTERVALS": self.learning.REVIEW_INTERVALS,
                "MASTERY_THRESHOLDS": self.learning.MASTERY_THRESHOLDS,
                "DIFFICULTY_LEVELS": self.learning.DIFFICULTY_LEVELS,
            },
            "cache": {
                "CACHE_TTL_SECONDS": self.cache.CACHE_TTL_SECONDS,
                "MAX_CACHE_SIZE": self.cache.MAX_CACHE_SIZE,
                "CACHE_KEY_LENGTH": self.cache.CACHE_KEY_LENGTH,
            },
            "api": {
                "DEFAULT_MODEL": self.api.DEFAULT_MODEL,
                "REQUEST_TIMEOUT": self.api.REQUEST_TIMEOUT,
                "MAX_RETRIES": self.api.MAX_RETRIES,
                "RESPONSE_MIME_TYPE": self.api.RESPONSE_MIME_TYPE,
            },
            "practice": {
                "MIN_SENTENCE_LENGTH": self.practice.MIN_SENTENCE_LENGTH,
                "MAX_SENTENCE_LENGTH": self.practice.MAX_SENTENCE_LENGTH,
                "RECENT_MISTAKES_COUNT": self.practice.RECENT_MISTAKES_COUNT,
                "MIN_PRACTICE_FOR_ANALYSIS": self.practice.MIN_PRACTICE_FOR_ANALYSIS,
            },
        }

        with open(config_file, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)

        print(f"‚úÖ ÈÖçÁΩÆÂ∑≤‰øùÂ≠òÂà∞ {config_file}")


# ÂâµÂª∫ÂÖ®Â±ÄÈÖçÁΩÆÂØ¶‰æã
settings = Settings()
